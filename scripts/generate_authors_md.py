"""
This module is used to generate an AUTHORS.md file that lists the contributors
to a git repository, ordered by their first contribution. It ensures that each
contributor is listed only once, even if they have multiple email addresses or
usernames associated with their contributions.
"""

import subprocess


def get_git_log():
    """
    Retrieves the git log in reverse order, showing the author name and email.

    Returns:
        str: A string containing the formatted git log.
    """
    return subprocess.check_output(
        ["git", "log", "--reverse", "--format=%aN (%aE)"]
    ).decode("utf-8")


def write_authors(authors):
    """
    Writes the list of authors to the AUTHORS.md file.

    Args:
        authors (list): A list of author strings to be written to the file.
    """
    with open("AUTHORS.md", "w", encoding="utf-8") as f:
        f.write("# Authors\n\n")
        f.write("#### Ordered by first contribution.\n\n")
        for author in authors:
            f.write(f"- {author}\n")
        f.write("\n#### Generated by tools/update-authors.py.\n")


def main():
    """
    The main function that processes the git log to extract unique contributors
    and writes them to the AUTHORS.md file.
    """
    git_log = get_git_log()
    seen_ids = set()
    ordered_authors = []

    for line in git_log.splitlines():
        _, email = line.rsplit(" ", 1)
        # Extract the unique ID from the email
        unique_id = email.split("+")[0].lower()

        # Check if the unique ID has already been added
        if unique_id not in seen_ids:
            seen_ids.add(unique_id)
            ordered_authors.append(line)

    write_authors(ordered_authors)


if __name__ == "__main__":
    main()
